"""
This script analyze the simulations generated by mc_get_aberrated_spectra.py and produce correction
to be applied to the data spectra
"""

import matplotlib
matplotlib.use("Agg")
from pspy import pspy_utils, so_dict, so_spectra, so_mcm
from pspipe_utils import pspipe_list, best_fits, kspace, log
import numpy as np
import pylab as plt
import sys

d = so_dict.so_dict()
d.read_from_file(sys.argv[1])
log = log.get_logger(**d)

type = d["type"]
surveys = d["surveys"]
iStart = d["iStart"]
iStop = d["iStop"]
lmax = d["lmax"]


mcm_dir = "mcms"
spec_dir = "sim_spectra_aberration"
ab_dir = "aberration_correction"
bestfit_dir = "best_fits"
plot_dir = "plots/aberration_sim"

pspy_utils.create_directory(ab_dir)
pspy_utils.create_directory(plot_dir)

clfile = f"{bestfit_dir}/cmb.dat"
spectra = ["TT", "TE", "TB", "ET", "BT", "EE", "EB", "BE", "BB"]
spin_pairs = ["spin0xspin0", "spin0xspin2", "spin2xspin0", "spin2xspin2"]
n_sims =  iStop - iStart + 1

spec_name_list = pspipe_list.get_spec_name_list(d, delimiter="_")

_, sv_list, ar_list = pspipe_list.get_arrays_list(d)
array_list = [f"{sv}_{ar}" for (sv, ar) in zip(sv_list, ar_list)]
lth, cmb_and_fg_dict = best_fits.fg_dict_from_files(bestfit_dir + "/fg_{}x{}.dat",
                                                    array_list,
                                                    lmax + 2,
                                                    spectra,
                                                    f_name_cmb=bestfit_dir + "/cmb.dat")

ps_list = {}
for iii in range(iStart, iStop + 1):
    for sid, spec_name in enumerate(spec_name_list):

        lb, ps_noab = so_spectra.read_ps(spec_dir + f"/{type}_{spec_name}_no_aberration_{iii:05d}.dat", spectra=spectra)
        lb, ps_ab = so_spectra.read_ps(spec_dir + f"/{type}_{spec_name}_aberration_{iii:05d}.dat", spectra=spectra)

        for spectrum in spectra:
        
            if iii == 0:
                ps_list[spec_name, spectrum] = {}
                ps_list[spec_name, spectrum]["no_aberration"] = []
                ps_list[spec_name, spectrum]["aberration"] = []
                ps_list[spec_name, spectrum]["diff"] = []

            ps_list[spec_name, spectrum]["no_aberration"] += [ps_noab[spectrum]]
            ps_list[spec_name, spectrum]["aberration"] += [ps_ab[spectrum]]
            ps_list[spec_name, spectrum]["diff"] += [ps_ab[spectrum] - ps_noab[spectrum]]
            
    
for spec_name in spec_name_list:

    log.info(f"plot uncorrected vs corrected mean for {spec_name} ")
    prefix= f"{mcm_dir}/{spec_name}"
    n1, n2 = spec_name.split("x")

    ab_corr = {}
    
    for spectrum in spectra:

        mean_aberration= np.mean(ps_list[spec_name, spectrum]["aberration"], axis=0)
        mean_no_aberration = np.mean(ps_list[spec_name, spectrum]["no_aberration"], axis=0)
        mean_diff = np.mean(ps_list[spec_name, spectrum]["diff"], axis=0)
        
        std_aberration= np.std(ps_list[spec_name, spectrum]["aberration"], axis=0)
        std_no_aberration = np.std(ps_list[spec_name, spectrum]["no_aberration"], axis=0)
        std_diff = np.std(ps_list[spec_name, spectrum]["diff"], axis=0)

        plt.figure(figsize=(12,8))
        if spectrum == "TT":
            plt.semilogy()

        plt.subplot(3,1,1)
        plt.plot(lth, cmb_and_fg_dict[n1, n2][spectrum])
        plt.errorbar(lb, mean_aberration, std_aberration, fmt=".", color="red", label = "aberrated")
        plt.errorbar(lb, mean_no_aberration, std_no_aberration, fmt=".", color="blue", label = "no aberration")
        plt.ylabel(r"$D^{%s}_{\ell}$" % spectrum, fontsize=20)
        plt.legend()
        plt.subplot(3,1,2)
        plt.plot(lb, lb * 0)
        plt.errorbar(lb, mean_diff, std_diff / np.sqrt(n_sims), color="red", label = "aberation effect")
        plt.ylabel(r"$D^{%s, \rm aberrated}_{\ell} - D^{%s}_{\ell}$" % (spectrum, spectrum), fontsize=20)
        plt.xlabel(r"$\ell$", fontsize=20)
        plt.legend()

        if spectrum in ["TT", "EE", "BB"]:
            plt.subplot(3,1,3)

            #plt.figure(figsize=(12,8))
            if spectrum == "TT":
                plt.ylim(-0.017,0.005)
            if spectrum == "EE":
                plt.ylim(-0.022,0.022)

            plt.plot(lb, lb * 0)
            plt.errorbar(lb, mean_diff/mean_aberration, std_diff / (mean_aberration * np.sqrt(n_sims)), color="red", label = "aberation effect")
            plt.ylabel(r"$\Delta D^{%s}_{\ell} / D^{%s}_{\ell}$" % (spectrum, spectrum) , fontsize=20)
            plt.xlabel(r"$\ell$", fontsize=20)
            plt.legend()
        plt.savefig(f"{plot_dir}/aberration_effect_{spec_name}_{spectrum}.png", bbox_inches="tight")
        plt.clf()
        plt.close()

        ab_corr[spectrum] = mean_diff
        
    so_spectra.write_ps(f"{ab_dir}/aberration_correction_{spec_name}.dat",
                        lb,
                        ab_corr,
                        type=type,
                        spectra=spectra)
