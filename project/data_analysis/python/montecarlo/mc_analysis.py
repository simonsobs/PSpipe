"""
This script analyze the simulations generated by mc_mnms_get_spectra_from_nlms.py and stored in "sim_spec_dir" specified in the dictionary file.
it estimates the mean and numerical std from the simulations
"""


from pspy import pspy_utils, so_dict, so_spectra
from pspipe_utils import log
import numpy as np
import sys

d = so_dict.so_dict()
d.read_from_file(sys.argv[1])
log = log.get_logger(**d)

type = d["type"]
surveys = d["surveys"]
iStart = d["iStart"]
iStop = d["iStop"]
lmax = d["lmax"]
sim_alm_dtype = d["sim_alm_dtype"]

if sim_alm_dtype == "complex64":
    spec_dtype = np.float32
elif sim_alm_dtype == "complex128":
    spec_dtype = np.float64


sim_spec_dir = d["sim_spec_dir"]
mcm_dir = "mcms"
mc_dir = "montecarlo"
cov_dir = "covariances"

pspy_utils.create_directory(mc_dir)
pspy_utils.create_directory(cov_dir)

spectra = ["TT", "TE", "TB", "ET", "BT", "EE", "EB", "BE", "BB"]

for kind in ["cross", "noise", "auto"]:

    vec_list = []

    for iii in range(iStart, iStop + 1):
        log.info(f"reading sim spectra {kind} {iii}")

        vec = []

        for spec in spectra:
            for id_sv1, sv1 in enumerate(surveys):
                arrays_1 = d[f"arrays_{sv1}"]
                for id_ar1, ar1 in enumerate(arrays_1):
                    for id_sv2, sv2 in enumerate(surveys):
                        arrays_2 = d[f"arrays_{sv2}"]
                        for id_ar2, ar2 in enumerate(arrays_2):

                            if  (id_sv1 == id_sv2) & (id_ar1 > id_ar2) : continue
                            if  (id_sv1 > id_sv2) : continue
                            if (sv1 != sv2) & (kind == "noise"): continue
                            if (sv1 != sv2) & (kind == "auto"): continue

                            spec_name = f"{type}_{sv1}_{ar1}x{sv2}_{ar2}_{kind}_%05d" %  iii

                            lb, Db = so_spectra.read_ps(sim_spec_dir + f"/{spec_name}.dat", spectra=spectra)

                            n_bins = len(lb)
                            vec = np.append(vec, Db[spec])
                            
        vec_list += [vec.astype(spec_dtype)]

    log.info(f"computing monte carlo mean and std")

    mean_vec = np.mean(vec_list, axis=0)
    std_vec = np.std(vec_list, axis=0)

    log.info(f"saving files on disk")

    id_spec = 0
    for spec in spectra:
        for id_sv1, sv1 in enumerate(surveys):
            arrays_1 = d[f"arrays_{sv1}"]
            for id_ar1, ar1 in enumerate(arrays_1):
                for id_sv2, sv2 in enumerate(surveys):
                    arrays_2 = d[f"arrays_{sv2}"]
                    for id_ar2, ar2 in enumerate(arrays_2):

                        if  (id_sv1 == id_sv2) & (id_ar1 > id_ar2) : continue
                        if  (id_sv1 > id_sv2) : continue
                        if (sv1 != sv2) & (kind == "noise"): continue
                        if (sv1 != sv2) & (kind == "auto"): continue

                        mean = mean_vec[id_spec * n_bins:(id_spec + 1) * n_bins]
                        std = std_vec[id_spec * n_bins:(id_spec + 1) * n_bins]

                        np.savetxt(f"{mc_dir}/spectra_{spec}_{sv1}_{ar1}x{sv2}_{ar2}_{kind}.dat", np.array([lb, mean, std]).T)

                        id_spec += 1
