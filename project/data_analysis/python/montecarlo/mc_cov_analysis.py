"""
This script analyze the simulations generated by mc_mnms_get_spectra_from_nlms.py and stored in sim_spec_dir specified in the dictionary file.
it estimates  numerical covariances from the simulations
"""

from pspy import pspy_utils, so_dict, so_spectra
from pspipe_utils import pspipe_list, covariance, log
import numpy as np
import sys

d = so_dict.so_dict()
d.read_from_file(sys.argv[1])
log = log.get_logger(**d)

type = d["type"]
surveys = d["surveys"]
iStart = d["iStart"]
iStop = d["iStop"]


sim_spec_dir = d["sim_spec_dir"]
cov_dir = "covariances"

pspy_utils.create_directory(cov_dir)

spectra = ["TT", "TE", "TB", "ET", "BT", "EE", "EB", "BE", "BB"]

if d["cov_T_E_only"] == True:
    modes_for_cov = ["TT", "TE", "ET", "EE"]
else:
    modes_for_cov = spectra


spec_list = pspipe_list.get_spec_name_list(d, delimiter="_")

log.info(f"we start by constructing block mc covariances")

for sid1, spec1 in enumerate(spec_list):
    for sid2, spec2 in enumerate(spec_list):
        if sid1 > sid2 : continue
        
        log.info(f"mc cov block: {spec1} {spec2}")

        na, nb = spec1.split("x")
        nc, nd = spec2.split("x")

        ps_list_ab = []
        ps_list_cd = []
        for iii in range(iStart, iStop + 1):
            spec_name_cross_ab = f"{type}_{na}x{nb}_cross_%05d" % iii
            spec_name_cross_cd = f"{type}_{nc}x{nd}_cross_%05d" % iii

            lb, ps_ab = so_spectra.read_ps(sim_spec_dir + f"/{spec_name_cross_ab}.dat", spectra=spectra)
            lb, ps_cd = so_spectra.read_ps(sim_spec_dir + f"/{spec_name_cross_cd}.dat", spectra=spectra)

            vec_ab = []
            vec_cd = []
            for spec in modes_for_cov:
                vec_ab = np.append(vec_ab, ps_ab[spec])
                vec_cd = np.append(vec_cd, ps_cd[spec])

            ps_list_ab += [vec_ab]
            ps_list_cd += [vec_cd]

        cov_mc = np.cov(ps_list_ab, ps_list_cd, rowvar=False)
        n_el = int(cov_mc.shape[0] / 2)
        cov_mc = cov_mc[:n_el, n_el:]

        np.save(f"{cov_dir}/mc_cov_{na}x{nb}_{nc}x{nd}.npy", cov_mc)

n_bins = len(lb)

log.info(f"create full montecarlo covariance using the different block")

x_ar_mc_cov = covariance.read_cov_block_and_build_full_cov(spec_list,
                                                           cov_dir,
                                                           cov_type = "mc_cov",
                                                           spectra_order = modes_for_cov,
                                                           remove_doublon=True)

np.save(f"{cov_dir}/x_ar_mc_cov.npy", x_ar_mc_cov)
